// The sequence of triangle numbers is generated by adding the natural numbers.
//So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

fn faster_number_of_divisors(n: i64) -> i64{
    let mut no = 0;
    for i in 1..((n as f64).sqrt() as i64) + 1{
        if n % i == 0{
            if n/i == i{
                no += 1;
            }
            else{
                no += 2;
            }
        }
    }
    return no;
}

fn number_of_divisors(n: i64) -> i64{
    let mut no = 0;
    for i in 1..n + 1{
        if n % i == 0{
            no += 1;
        }
    }
    return no;
}

fn get_triangle() -> i64{
    let done = true;
    let mut index = 1;
    let mut sum = 0;

    while done{
        sum += index;        
        if faster_number_of_divisors(sum) > 500{
            return sum;
        }
        index += 1;
        println!("sum: {} divs: {}", sum, faster_number_of_divisors(sum));
    }
    return -1;
}

fn main(){
    let result: i64 = get_triangle();
    println!("{} divs: {} ", result, faster_number_of_divisors(result));
}